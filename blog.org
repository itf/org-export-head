#+OPTIONS:   broken-links:mark
#+OPTIONS: toc:nil num:3 H:4 ^:nil pri:t title:nil  html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>
* README                                                           :noexport:
Run the code inside the code block.

Run M-x org-export-head or (org-export-head directory backend)

The MENU and FOOTNOTES have to be :noexport: It cannot contain a property drawer at the moment.

* Code                                                             :noexport: 
#+BEGIN_SRC emacs-lisp   

;; based on http://pragmaticemacs.com/emacs/export-org-mode-headlines-to-separate-files/
;; export headlines to separate files
;; http://emacs.stackexchange.com/questions/2259/how-to-export-top-level-headings-of-org-mode-buffer-to-separate-files

(defun org-export-head--create-temp-buffer-copy-content()
  (interactive)
  (let ((temp-buffer (generate-new-buffer "temp")))
      (copy-to-buffer temp-buffer (point-min) (point-max)) 
))

(defun org-export-head--run-on-temp-copy-buffer (function-to-run &rest args)
  (save-excursion
    (let ((temp-buffer (generate-new-buffer "tmp")))
      (copy-to-buffer temp-buffer (point-min) (point-max)) 
      (with-current-buffer temp-buffer (org-mode) (outline-show-all) (apply function-to-run args))
      (kill-buffer temp-buffer)
      )))

(defun org-export-head (&optional directory-name backend reexport)
  (interactive)
  (let ((directory-name (or directory-name (read-directory-name "Directory:")))
        (backend (or backend "html")))
    (make-directory directory-name t)
    (org-export-head--update-hashes)
    (org-export-head--run-on-temp-copy-buffer #'org-export-head--modify-buffer-ast directory-name backend reexport)))


(defun org-export-head-reexport (&optional directory-name backend reexport)
  (interactive)
  (org-export-head directory-name backend t))

(defun org-export-head--modify-buffer-ast (directory-path backend reexport)
  "Export all subtrees that are *not* tagged with :noexport: to
separate files.

Subtrees that do not have the :EXPORT_FILE_NAME: property set
are exported to a filename derived from the headline text."
  ;; Delete content that has already been exported and set it to non-export
  (if (not reexport)
      (org-export-head--delete-noreexport))
  
  ;;Get the parser tree and the headlines that will become files
  (let*  ((ast (org-element-parse-buffer))
          (headlines (org-export-head--get-headlines-ast ast)))
    
    
    ;;Get the templates
    (let ((header (org-export-head--get-content-subtree-match-tag-ast "header" ast))
          (index (org-export-head--get-index headlines)))
      
      ;;For each not noexport headline apply the template, i.e. copy contents
      (org-export-head--run-on-match-headline-ast 
       #'(lambda (headline) 
           (org-export-head--insert-on-headline-footer-ast headline index))
       '("index") ast)
      
      (org-export-head--run-on-not-match-headline-ast 
       #'(lambda (headline) 
           (org-export-head--insert-on-headline-header-ast headline header))
       '("noexport" "noheader" "noreexport") ast)
      
      ;;Fix links -- order is important. First external than fuzzy links
                                        ; (org-export-head--fix-links-ast headlines ast)
      (org-element-map ast 'link
        (lambda (link)
          (let* ((link (or (org-export-head--fix-file-external-link-ast directory-path link) link))
                 (link (or (org-export-head--fix-local-link-ast headlines link) link))
                 ))
          ())))
    
    ;;Convert the buffer to contain the new AST, 
    ;;this is needed because the exporter expects the content to be in a buffer
    (erase-buffer) 
    (insert (org-element-interpret-data ast))
    (outline-show-all)
    
    ;;Finally export all the headers
    (org-export-head-export-headers directory-path backend)))


;;Not everything can be done using the AST, sadly.
;;START OF NON AST SESSION
(defun org-export-head--run-on-each-heading(fn match  &rest args)
  (save-excursion
      (goto-char (point-min))
      (goto-char (re-search-forward "^*"))
      (set-mark (line-beginning-position))
      (goto-char (point-max))
      (org-map-entries
       (lambda ()
         (apply fn args)
         )
       match 'region-start-level)
       (deactivate-mark)))

(defun org-export-head-export-headers (directory-name backend)
  (if (equal backend "html")
      (org-export-head--run-on-each-heading 
       #'(lambda ()
           (org-set-property
            "EXPORT_FILE_NAME"
            (concat directory-name (org-export-head--escaped-headline)))
           (deactivate-mark)
           (org-html-export-to-html nil t)
           (set-buffer-modified-p t)) "-noexport-noreexport"))
  (if (equal backend "pdf")
      (org-export-head--run-on-each-heading 
       #'(lambda ()
           (org-set-property
            "EXPORT_FILE_NAME"
            (concat directory-name (org-export-head--escaped-headline)))
           (deactivate-mark)
           (org-latex-export-to-pdf nil t)
           (set-buffer-modified-p t)) "-noexport-noreexport")))

(defun org-export-head--goto-header(&optional no-new-line)
  (interactive)
  (org-back-to-heading t)
  (let* ((beg-end (org-get-property-block))
         (end (cdr beg-end)))
    (goto-char (or end (point))))
  (goto-char (point-at-bol 2))
   (if (not no-new-line) 
    (progn
      (newline)
      (goto-char (point-at-bol 0))))
   (point))

(defun org-export-head--get-content-subtree-at-point()
  (save-mark-and-excursion
    (deactivate-mark t)
    (let ((start (org-export-head--goto-header t))
          (end (org-end-of-subtree t))) 
      (buffer-substring start end))))

(defun get-hash-value-content()
  (md5 (org-export-head--get-content-subtree-at-point)))

(defun org-export-head--update-hashes()
  (org-export-head--run-on-each-heading 
   #'(lambda()
       (let ((new-hash (get-hash-value-content))
             (old-hash (org-entry-get-with-inheritance "HASH")))
         (if (not old-hash)
             (progn
               (org-set-property "CREATION-DATE" (format-time-string "%Y-%m-%d"))))
         ;;If there was a change made
         (if (not (equal new-hash old-hash))
             (org-set-property "MODIFICATION-DATE" (format-time-string "%Y-%m-%d")))
         (org-set-property "HASH" new-hash)
         (org-set-property "PREVIOUS-HASH" (or old-hash ""))))
   "-noexport"))


;;Needs to be in outline show all mode
(defun org-export-head--delete-noreexport()
  "Faster export by deleting things that won't be exported so no need to process then"
  (org-export-head--run-on-each-heading 
   #'(lambda()
       (let ((old-hash (org-entry-get-with-inheritance "PREVIOUS-HASH"))
             (new-hash (org-entry-get-with-inheritance "HASH")))    
         ;;If there was a change made
         (if (equal new-hash old-hash)
             (progn
               (org-toggle-tag "noreexport" 'on)
               ;;faster export by deleting noexport things before processing
               (org-export-head--erase-content-subtree)
               ))
         )) "-noexport"))

(defun org-export-head--erase-content-subtree()
  (save-excursion
    (let ((start (org-export-head--goto-header t))
          (end (org-end-of-subtree))) 
      (delete-region start end))))

;;END OF NON AST SESSION
(defun org-export-head--fix-local-link-ast (headlines link)
  (flet ((get-hash (element set)
                   (gethash element set nil)))
    (when (string= (org-element-property :type link) "fuzzy")
      (let* ((path  (org-element-property :path link))
             (new-path (get-hash path headlines))) 
             (when new-path
               (let ((link-copy (org-element-copy link)))
                 (apply #'org-element-adopt-elements link-copy (org-element-contents link))
                 (org-element-put-property link-copy :type "file")
                 (org-element-put-property link-copy :path (concat (org-export-head--escape path) ".org"))
                 (org-element-set-element link link-copy)))))))


(defun org-export-head--fix-file-external-link-ast (directory-path link)
  (when (string= (org-element-property :type link) "file")
    (let* ((path (org-element-property :path link))
           (link-copy (org-element-copy link))
           ;;Removes ../ from the releative path of the file to force it to be moved to a subfolder
           ;;of the current dir. This causes some file conflits in edge cases
           ;;e.g: ../images and ../../images will map to the same place. This should be rare in normal usage
           (new-relative-path 
            (replace-regexp-in-string "\\.\\./" "" (file-relative-name path)))
           (new-hard-link-path (concat directory-path new-relative-path))
           (new-hard-link-directory (file-name-directory new-hard-link-path)))
      
      ;;Fix the AST
      (apply #'org-element-adopt-elements link-copy (org-element-contents link))
      (org-element-put-property link-copy :path new-relative-path)
      (org-element-set-element link  link-copy)
      
      ;;Create hard link folder
      (make-directory new-hard-link-directory t)
      ;;Create hard link, replacing if it already exists, catching error if file does not exist
      (condition-case nil
          (add-name-to-file path new-hard-link-path nil)
        (error nil))
      )))


;;This is a hack. Create index in a separate buffer headline
;;The copy the contents of the headline
(defun org-export-head--get-index (headlines)
  (save-excursion
  (let ((temp-buffer (generate-new-buffer "temp"))
        (contents nil))
    (with-current-buffer temp-buffer 
      (org-mode) 
      (outline-show-all) 
      (insert "* Pages\n\n") ;; Ignored. Necessary for org-element-contents to work properly.
      (maphash (lambda(key value) (insert (concat "- [[" key "][" key "]]\n")))  headlines)
      (setq contents(org-element-contents (car (org-element-contents (org-element-parse-buffer))))))
    (kill-buffer temp-buffer)
    contents)))

(defun org-export-head--run-on-not-match-headline-ast (fn not-match ast)
    (org-element-map ast 'headline
      (lambda (headline)
        (unless (cl-intersection not-match (org-element-property :tags headline) :test 'equal) 
          (when (equal 1 (org-element-property :level headline))
          (funcall fn headline)
          )))))


(defun org-export-head--run-on-match-headline-ast (fn match ast)
    (org-element-map ast 'headline
      (lambda (headline)
        (when (cl-intersection match (org-element-property :tags headline) :test 'equal)
          (when (equal 1 (org-element-property :level headline))
            (funcall fn headline)
          )))))

  
(defun org-export-head--get-headlines-ast (ast)
  (flet 
      ((make-hash ()
                 (make-hash-table :test 'equal))
       (add-to-hash (headline set)
                   (puthash headline  (org-export-head--headline-to-file headline) set))
       )
    (let ((set (make-hash)))
        (org-export-head--run-on-not-match-headline-ast
         #'(lambda (headline) (add-to-hash (org-element-property :raw-value headline) set))
         '("noexport") ast)
  set)))


;;Quite ugly, but necessary to not insert things inside the properties drawer
(defun org-export-head--insert-on-headline-header-ast (headline contents)
  (let* ((headline-contents (org-element-contents headline))
         (section-contents  (org-element-contents (car headline-contents)))
         (next-child (car (cdr headline-contents)))
         (child (car section-contents)))
     (while (memq (org-element-type child) '(planning drawer property-drawer))
       (setq section-contents (cdr section-contents))
       (setq child (car section-contents)))
     (setq child (or child next-child))
     (if child 
         (dolist (element contents) 
           (org-element-insert-before element child))
       (apply #'org-element-adopt-elements headline contents))))

;;There is some weird bug with insert on footer. 
(defun org-export-head--insert-on-headline-footer-ast (headline contents)
  (apply #'org-element-adopt-elements headline contents))



(defun org-export-head--escaped-headline ()
  (org-export-head--escape (org-export-head--headline)))

(defun org-export-head--headline ()
  (nth 4 (org-heading-components)))


(defun org-export-head--escape(text)
  (replace-regexp-in-string "[\\?.,!]" ""
   (replace-regexp-in-string "/" "-" 
    (replace-regexp-in-string " " "_" text))))

(defun org-export-head--headline-to-file(headline)
   (concat (org-export-head--escape headline) ".org"))

(defun org-export-head--get-content-subtree-match-tag-ast(match ast)
  (let ((contents nil))
    (org-element-map ast 'headline
      (lambda (headline)
        (when (member match (org-element-property :tags headline))
          (setq contents   (nconc contents (org-element-contents headline)))))) 
    contents))



;;Functions not in use that can be used to easily add more template things.
(defun org-export-head--insert-content-match-headline-in-not-match-headline-ast(from-match to-not-match headline)
  (org-export-head--run-on-not-match-headline-ast 
   #'(lambda (headline) 
       (org-export-head--insert-on-headline-header-ast 
        headline
        (org-export-head--get-content-subtree-match-tag-ast from-match ast)))
   to-not-match ast))


(defun org-export-head--insert-content-match-headline-in-match-headline-ast(from-match to-match headline)
  (org-export-head--run-on-not-match-headline-ast 
   #'(lambda (headline) 
       (org-export-head--insert-on-headline-header-ast 
        headline
        (org-export-head--get-content-subtree-match-tag-ast from-match ast)))
   to-match ast))
  
  

#+END_SRC

#+RESULTS:
: org-export-head--insert-content-match-headline-in-match-headline-ast


* Includes :noexport:
Creates a hard link to org.css in the export directory.
[[file:./org.css]]

* Menu :noexport:header:
#+begin_head
#+begin_title
[[Index][Ivan @ Home]]
#+end_title
#+begin_catch-phrase
Excelsior!
#+end_catch-phrase

#+begin_nav
- [[Index][home]]
- [[Foo][Foo!!]]
- [[Foo Bar][Foo Bar!!]]
- [[Broken][Should say Broken link]]
#+end_nav
#+end_head


@@html: <h1>@@
#+BEGIN_SRC emacs-lisp :exports results :results value raw
(org-element-interpret-data (plist-get (org-export-get-environment nil t) ':title))
#+END_SRC
@@html: </h1>@@

#+TOC: headlines 2

* Index :index:
This is my index! Sadly during export I lose access to all information related to it. 

Anyway:
** Index is here!



   
* Foo
** subheader 0
SCHEDULED: <2018-08-31 Fri>

This is an example page that will be generated. 


** subheader1
** Subheader 2
*** Subheader 2.1
**** Subheader 2.1.1
** Subheader 3

   [[Subheader 2.1.1][Internal link!]]

   [[Bar][External Link without space!]]

   [[Foo Bar][External Link with space!]]




#+BEGIN_SRC emacs-lisp 
[[test]] ;Show that links in code are not affected!
#+END_SRC

* Bar

Here we show that footnotes work [fn:1].

They are pretty great! [fn:2]

* Foo Bar
  Nothing to see here
* Footnotes :noexport:

[fn:2] My second foot note!

[fn:1] How does this work


